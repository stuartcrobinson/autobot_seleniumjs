,
    // "babel-cli": "^6.26.0",
    // "babel-polyfill": "^6.26.0"

        "babel-core": "^7.0.0-bridge.0",


GLOBAL afterEach ########### currentTest: [object Object]
{
  "title": "demo2222222222",
  "body": "function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }",
  "async": 0,
  "sync": true,
  "timedOut": false,
  "pending": false,
  "type": "test",
  "file": "/Users/stuartrobinson/repos/mochaseleniumjs/autobot/test/demo/goo2.js",
  "parent": "#<Suite>",
  "ctx": "#<Context>",
  "timer": {},
  "duration": 3,
  "state": "failed",
  "err": {}
}
Suite {
  title: 'Google Search 2222222',
  ctx:
   Context {
     _runnable:
      {
  "title": "demo2222222222",
  "body": "function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }",
  "async": 0,
  "sync": true,
  "timedOut": false,
  "pending": false,
  "type": "test",
  "file": "/Users/stuartrobinson/repos/mochaseleniumjs/autobot/test/demo/goo2.js",
  "parent": "#<Suite>",
  "ctx": "#<Context>",
  "timer": {},
  "duration": 3,
  "state": "failed",
  "err": {}
},











        console.log("##############################################################################################################")
        console.log("################################################  wtf  #######################################################")
        console.log("##############################################################################################################")

        console.log("this.currentTest")
        console.log(this.currentTest)
        console.log()

        /*
        
        
        ERROR OBJHEJCT>>??
        
        */




       console.log(" Object.getOwnPropertyNames( this.currentTest.err")
       console.log( Object.getOwnPropertyNames(this.currentTest.err))

       console.log(" this.currentTest.err")
       console.log( this.currentTest.err)
        console.log(" this.currentTest.err name")
        console.log( this.currentTest.err.name + ' yesssss')
        console.log(" this.currentTest.err message")
        console.log( this.currentTest.err.message+ ' yesssss')
        console.log(" this.currentTest.err stack")
        console.log( this.currentTest.err.stack+ ' yesssss')
        console.log()

        console.log("this.currentTest.err")
        console.log(this.currentTest.err)
        console.log()

        console.log("this.currentTest.err + 'hello'")
        console.log(this.currentTest.err + 'hello')
        console.log()

        console.log("this.currentTest.err[0]")
        console.log(this.currentTest.err[0])
        console.log()

        console.log("stringify this.currentTest.err")
        console.log(JSON.stringify(this.currentTest.err))
        console.log()

        console.log("this.currentTest.err properties and values BEGIN:")

        for (var propName in this.currentTest.err) {
            let propValue = this.currentTest.err[propName]
            console.log("this.currentTest.err wtffff " + propName, propValue);
        }

        console.log("this.currentTest.err properties and values END:")

        console.log("--------------------------------------------------------------------------------------------------------------")
        console.log("################################################  end  #######################################################")
        console.log("--------------------------------------------------------------------------------------------------------------")

        // console.log(stackStr)


        // console.log("typeof this.currentTest.err")
        // console.log(typeof this.currentTest.err)

        // console.log("this.currentTest.err")
        // console.log(this.currentTest.err)

        // const ddd = this.currentTest.err

        // console.log("ddd")
        // console.log(ddd.length)

        // console.log("ddd+ddd")
        // console.log(ddd + ddd)


        // console.log("this.currentTest.err[0]")
        // console.log(this.currentTest.err[0])

        // console.log("stringify this.currentTest.err")
        // console.log(JSON.stringify(this.currentTest.err))


        // for (var propName in this.currentTest.err) {
        //     let propValue = this.currentTest.err[propName]
        //     console.log("this.currentTest.err wtffff " + propName, propValue);
        // }
